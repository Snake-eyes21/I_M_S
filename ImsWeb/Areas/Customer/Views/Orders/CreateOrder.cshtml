@model Ims.Models.ViewModels.CreateOrderViewModel
@{
    ViewData["Title"] = "CreateOrder";
}

<h1>CreateOrder</h1>




<form asp-action="CreateOrder" method="post">
    <input asp-for="UserId" value="@ViewBag.UserId" hidden />
    

    <div class="form-group">
        <input asp-for="ProductId" value="@Model.ProductId" id="hiddenProductId" hidden />
        <input type="text" class="form-control" id="productName" disabled />
    </div>
    <div class="form-group">
        <label>Quantity</label>
        <input type="number" class="form-control" asp-for="Quantity" min=1 required />
    </div>

    <div class="form-group">
        <label>Price</label>
        <input type="text" id="productPrice" class="form-control" asp-for="Price" readonly />
    </div>
    <div class="form-group">
        <label asp-for="OrderType" class="control-label"></label>
        <select asp-for="OrderType" class="form-control" asp-items="ViewBag.OrdersType"></select>
        <span asp-validation-for="OrderType" class="text-danger"></span>
    </div>
    <button type="submit" class="btn btn-primary">Place Order</button>
</form>

@section Scripts {
    <script>
        $(document).ready(function () {
            var productId = $("#hiddenProductId").val();

            $.getJSON('/Customer/Orders/GetProducts', { productId: productId }, function (data) {
                console.log("Data received:", data);
                if (data && typeof data === 'object') {
                    var product = data;
                    console.log("Product:", product);
                    $("#productName").val(product.productName);
                    $("#productPrice").val(product.unitPrice);
                } else {
                    console.log("Data is not an object.");
                }
            });
        });
    </script>
}


